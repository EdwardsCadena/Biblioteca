@page "/Libros"
@rendermode InteractiveServer

@using Biblioteca.Data
@using Biblioteca.Interfaces
@using Biblioteca.Repository

@inject IJSRuntime JSRuntime

<PageTitle>Libros</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <h3>Listado de Libros</h3>

            @if (libros == null)
            {
                <p>Cargando libros...</p>
            }
            else if (libros.Count == 0)
            {
                <p>No hay libros registrados.</p>
            }
            else
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Título</th>
                            <th>Autor</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var libro in libros)
                        {
                            <tr>
                                <td>@libro.Title</td>
                                <td>@(libro.Author?.Name ?? "Desconocido")</td>
                                <td>
                                    <button class="btn btn-primary btn-sm" @onclick="@(() => AbrirModalEditar(libro))">
                                        <i class="bi bi-pencil"></i> Editar
                                    </button>
                                    <button class="btn btn-danger btn-sm" @onclick="@(() => EliminarLibro(libro.Id, libro.Title))">
                                        <i class="bi bi-trash"></i> Eliminar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>

        <div class="col-md-6">
            <h3>Crear Nuevo Libro</h3>

            <div class="card">
                <div class="card-body">
                    <div class="form-group">
                        <label for="titulo">Título:</label>
                        <input type="text" class="form-control" id="titulo" @bind="@nuevoLibro.Title" />
                    </div>
                    <div class="form-group mt-2">
                        <label for="autor">Autor:</label>
                        <select class="form-control" id="autor" @bind="@nuevoLibro.Authorid">
                            <option value="">Selecciona un autor</option>
                            @if (autores != null)
                            {
                                @foreach (var autor in autores)
                                {
                                    <option value="@autor.Id">@autor.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <button class="btn btn-success mt-2" @onclick="CrearNuevoLibro">
                        <i class="bi bi-plus"></i> Crear Libro
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Editar Libro -->
<div class="modal fade" id="editarLibroModal" tabindex="-1" aria-labelledby="editarLibroModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editarLibroModalLabel">Editar Libro</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="editarTitulo">Título:</label>
                    <input type="text" class="form-control" id="editarTitulo" @bind="@libroParaEditar.Title" />
                </div>
                <div class="form-group mt-2">
                    <label for="editarAutor">Autor:</label>
                    <select class="form-control" id="editarAutor" @bind="@libroParaEditar.Authorid">
                        @if (autores != null)
                        {
                            @foreach (var autor in autores)
                            {
                                <option value="@autor.Id">@autor.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" @onclick="GuardarCambiosLibro">Guardar Cambios</button>
            </div>
        </div>
    </div>
</div>

@code {
    List<Book> libros = new List<Book>();
    List<Author> autores = new List<Author>();
    Book nuevoLibro = new Book();
    Book libroParaEditar = new Book();

    [Inject]
    IGeneriRepository<Book> BookRepository { get; set; }
    [Inject]
    IGeneriRepository<Author> AuthorRepository { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            libros = await BookRepository.GetAllBooksAsync() ?? new List<Book>();
            autores = await AuthorRepository.GetAllAsync() ?? new List<Author>();

            // Debugging
            foreach (var libro in libros)
            {
                Console.WriteLine($"Libro: {libro.Title}, AutorId: {libro.Authorid}, AutorNombre: {libro.Author?.Name ?? "No asignado"}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando datos: {ex.Message}");
        }
    }

    private async Task CrearNuevoLibro()
    {
        try
        {
            await BookRepository.AddAsync(nuevoLibro);
            libros = await BookRepository.GetAllBooksAsync() ?? new List<Book>();
            nuevoLibro = new Book();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al crear libro: {ex.Message}");
        }
    }

    private void AbrirModalEditar(Book libro)
    {
        libroParaEditar = libro;
        JSRuntime.InvokeVoidAsync("bootstrapInterop.showModal", "editarLibroModal");
    }

    private async Task GuardarCambiosLibro()
    {
        try
        {
            await BookRepository.UpdateAsync(libroParaEditar);
            libros = await BookRepository.GetAllBooksAsync() ?? new List<Book>();
            JSRuntime.InvokeVoidAsync("bootstrapInterop.hideModal", "editarLibroModal");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar cambios: {ex.Message}");
        }
    }

    private async Task EliminarLibro(int libroId, string tituloLibro)
    {
        try
        {
            if (await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de eliminar el libro '{tituloLibro}'?"))
            {
                await BookRepository.DeleteAsync(libroId);
                libros = await BookRepository.GetAllBooksAsync() ?? new List<Book>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar libro: {ex.Message}");
        }
    }
}
